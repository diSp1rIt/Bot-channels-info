from aiogram import Bot, types, Dispatcher, executor
from cfg_loader import *
import registration
from handle_phone_number import check_phone_number
from telethon.tl.functions.channels import GetFullChannelRequest

configs = load_configs()

# ------ Global variables ------
bot = Bot(token=configs['TOKEN'])
dp = Dispatcher(bot)
client = registration.get_client()
channels_list = []
analyzing_channels_list = []
# ------------------------------

# ------ Flags ------
phone_require = False
code_require = False
channel_name_require = False
channel_name_for_analyze_require = False
# -------------------

# ------ Constants ------
Done = 'üü¢'
_Warning = 'üü°'
Error = 'üî¥'
Info = 'üîµ'
# -----------------------

# ------ Temp variables ------
wait_for_secret_key = []
phone = ''
code = 0
# ----------------------------


@dp.message_handler(commands=['start'])
async def start_handle(msg: types.Message):
    global wait_for_secret_key
    global configs

    if configs['OWNER_ID'] is None:
        await msg.answer('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á')
        wait_for_secret_key.append(msg.chat.id)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:')
    else:
        if msg.chat.id != configs['OWNER_ID']:
            await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        else:
            await msg.answer('–í–≤–æ–¥ –∫–ª—é—á–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')


@dp.message_handler(commands=['login'])
async def login_handle(msg: types.Message):
    global configs
    global phone_require
    global client

    if await client.is_user_authorized():
        await msg.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
        return
    if configs['OWNER_ID'] is None:
        await msg.answer('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á')
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    else:
        if configs['OWNER_ID'] != msg.chat.id:
            await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        else:
            await msg.answer('–ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...')
            await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
            phone_require = True


@dp.message_handler(commands=['update_list'])
async def list_channels_handle(msg: types.Message):
    global client
    global channels_list

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    text = []
    async for dialog in client.iter_dialogs():
        if dialog.is_channel:
            if dialog.id not in [elem.id for elem in analyzing_channels_list]:
                text.append(dialog.name + '\n' + Error + f'–ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')
            else:
                text.append(dialog.name + '\n' + Done + f'–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')
            if dialog not in channels_list:
                channels_list.append(dialog)
    await msg.answer('\n\n'.join(text))
    await msg.answer('–î–æ–±–∞–≤–∏—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É:\n/add_to_analyze')


@dp.message_handler(commands=['add_to_analyze'])
async def channel_handle(msg: types.Message):
    global client
    global channels_list
    global channel_name_require

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if len(channels_list) == 0:
        await msg.answer('–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π\n/update_list')
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    items = [types.KeyboardButton('/cancel')]
    temp_list = list(set(channels_list) - set(analyzing_channels_list))
    items.extend([types.KeyboardButton(elem.name) for elem in temp_list])
    markup.add(*items)
    channel_name_require = True
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª', reply_markup=markup)


@dp.message_handler(commands=['get_info'])
async def get_info_handle(msg: types.Message):
    global client
    global channels_list
    global channel_name_for_analyze_require

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    await msg.answer('–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö')
    if len(analyzing_channels_list) == 0:
        await msg.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–æ–π')
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        items = [types.KeyboardButton('/cancel')]
        items.extend(
            [types.KeyboardButton(f'{channel.name}') for channel in analyzing_channels_list])
        markup.add(*items)
        await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', reply_markup=markup)
        channel_name_for_analyze_require = True


@dp.message_handler(commands=['analyze_list'])
async def analyze_list_handle(msg: types.Message):
    global client
    global analyzing_channels_list

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if not analyzing_channels_list:
        await msg.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç')
        return

    text = []
    for channel in analyzing_channels_list:
        text.append(Info + channel.name)
    await msg.answer('\n\n'.join(text))


@dp.message_handler(content_types=['text'])
async def text_handle(msg: types.Message):
    global wait_for_secret_key
    global configs
    global phone
    global phone_require
    global code
    global code_require
    global client
    global channel_name_require
    global channel_name_for_analyze_require

    if msg.chat.id not in wait_for_secret_key:
        # –ï—Å–ª–∏ –∫–ª—é—á —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if configs['OWNER_ID'] is None:
            await msg.answer('–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É')
        else:
            if msg.chat.id != configs['OWNER_ID']:
                await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
            else:

                if phone_require:
                    try:
                        phone = check_phone_number(msg.text)
                    except ValueError as error:
                        await msg.answer(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(error)}')
                    else:
                        await msg.answer(f'–í–∞—à –Ω–æ–º–µ—Ä: {phone}')
                        try:
                            dp.loop.create_task(registration.send_code(phone))
                        except Exception as error:
                            await msg.answer('–¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω')
                            print(error)
                        else:
                            phone_require = False
                            code_require = True
                            await msg.answer(f'–í–∞–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram')
                            await msg.answer(f'–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "code<–≤–∞—à_–∫–æ–¥>"')
                elif code_require:
                    if len(msg.text) != 9 or 'code' not in msg.text:
                        await msg.answer('–ö–æ–¥ –±—ã–ª –≤–≤–µ–¥—ë–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
                    else:
                        code = msg.text.split('code')[1]
                        if not code.isdigit():
                            await msg.answer('–ö–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º')
                        else:
                            try:
                                await msg.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞')
                                dp.loop.create_task(registration.sing_in(phone, code))
                            except Exception as error:
                                await msg.answer('–¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–¥')
                                print(error)
                            else:
                                client = registration.get_client()
                                code_require = False
                                await msg.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
                elif channel_name_require:
                    if msg.text == '/cancel':
                        await msg.answer('–û—Ç–º–µ–Ω–∞', reply_markup=types.ReplyKeyboardRemove())
                        channel_name_require = False
                        return
                    index = [el.name for el in channels_list].index(msg.text)
                    analyzing_channels_list.append(channels_list[index])
                    await msg.answer(f'–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {msg.text}',
                                     reply_markup=types.ReplyKeyboardRemove())
                    channel_name_require = False
                elif channel_name_for_analyze_require:
                    if msg.text == '/cancel':
                        await msg.answer('–û—Ç–º–µ–Ω–∞', reply_markup=types.ReplyKeyboardRemove())
                        channel_name_for_analyze_require = False
                        return
                    index = [el.name for el in analyzing_channels_list].index(msg.text)
                    channel = analyzing_channels_list[index]

                    res = await client(GetFullChannelRequest(channel.id))
                    await msg.answer(f'–ò–Ω—Ñ–æ –æ {channel.name} –∫–∞–Ω–∞–ª:\n{res.stringify()}',
                                     reply_markup=types.ReplyKeyboardRemove())
                    channel_name_for_analyze_require = False
    else:
        if configs['OWNER_ID'] is None:
            if configs['SECRET_KEY'] == msg.text:
                set_config('OWNER_ID', msg.chat.id)
                configs = load_configs()
                await msg.answer('–ö–ª—é—á —Å–æ–≤–ø–∞–ª')
                wait_for_secret_key = []
                await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login')
            else:
                await msg.answer('–ö–ª—é—á –Ω–µ —Å–æ–≤–ø–∞–ª')
        else:
            await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')


if __name__ == '__main__':
    executor.start_polling(dp)
