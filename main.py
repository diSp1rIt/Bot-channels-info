from aiogram import Bot, types, Dispatcher, executor
from cfg_loader import *
from modules import registration
from modules.handle_phone_number import check_phone_number
from telethon.tl.functions.channels import GetFullChannelRequest
from modules.statistic_worker import *
from asyncio import sleep
from datetime import datetime
from os.path import getsize
from shutil import copyfile

# ------ Init ------
configs = load_configs()
# ------------------


# ------ Global variables ------
bot = Bot(token=configs['TOKEN'])
dp = Dispatcher(bot)
client = registration.get_client()
channels_list = []
analyzing_channels_list = []
channel_id_for_delete = 0
current_month = datetime.now().month
current_year = datetime.now().year
delta_month = 0
# ------------------------------


# ------ Global functions ------
async def msg_error_handler(msg: types.Message, flag_name: str, list_type=None) -> int:
    global analyzing_channels_list

    if list_type is None:
        list_type = analyzing_channels_list

    if msg.text == '/cancel':
        await msg.answer('–û—Ç–º–µ–Ω–∞', reply_markup=types.ReplyKeyboardRemove())
        exec(flag_name + ' = False')
        return 1

    try:
        id = int(msg.text.split('(')[1].strip(')'))
    except Exception:
        await msg.answer('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
        return 1

    if id not in [el.id for el in list_type]:
        await msg.answer('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return 1

    return 0


async def get_channel_info_from_msg(msg: types.Message):
    global analyzing_channels_list

    index = [el.id for el in analyzing_channels_list].index(int(msg.text.split('(')[1].strip(')')))
    channel = analyzing_channels_list[index]
    result = await client(GetFullChannelRequest(channel.id))

    return result


async def update_data():
    global analyzing_channels_list
    global client

    analyzing_channels_list = await load_channels(client)
    if analyzing_channels_list:
        await bot.send_message(configs['OWNER_ID'], Done + '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚è∞')

        including_range = dict()
        month = current_month - delta_month
        year = current_year

        while month < 0:
            year -= 1
            month += 12
            if month < 0:
                including_range[year] = list(range(1, 13))
            else:
                including_range[year] = list(range(month, 13))
                month = 1

        including_range[current_year] = list(range(month, current_month + 1))

        await messages_dump(client, analyzing_channels_list, including_range)
        for channel in analyzing_channels_list:
            await delete_data(channel.id, delete_from_channels=True)
            res = await client(GetFullChannelRequest(channel.id))
            await do_record(res)
        await bot.send_message(configs['OWNER_ID'], '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ')
    return


async def wipe_db():
    global db_ses
    global db_session
    global analyzing_channels_list

    await bot.send_message(configs['OWNER_ID'], _Warning + '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚è∞')
    await bot.send_document(configs['OWNER_ID'], types.InputFile('msgs_database.db', f'msg_dump_{current_month}.{current_year}.db'))

    for channel in analyzing_channels_list:
        await delete_data(channel.id, delete_from_posts=True)

    await bot.send_message(configs['OWNER_ID'], '–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞')


async def scheduled_actions():
    global current_month
    global current_year

    while True:

        if datetime.now().month == (current_month % 12) + 1:
            await wipe_db()
            if current_month == 12:
                current_year += 1
            current_month %= 12
            current_month += 1

        try:
            await update_data()
        except:
            pass

        await sleep(12 * 60 * 60)  # delay 12 hours
# ------------------------------


# ------ Upload data about channels ------
if client.is_user_authorized():
    # dp.loop.create_task(scheduled_actions())
    pass
else:
    if configs['OWNER_ID'] is not None:
        dp.loop.create_task(bot.send_message(configs['OWNER_ID'], '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≥–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'))
        dp.loop.create_task(bot.send_message(configs['OWNER_ID'], '–í–≤–µ–¥–∏—Ç–µ: /login'))
# ----------------------------------------


# ------ Flags ------
phone_require = False
code_require = False
channel_name_require = False
channel_name_for_analyze_require = False
channel_name_for_delete_require = False
confirm_for_delete_require = False
# -------------------


# ------ Constants ------
Done = 'üü¢'
_Warning = 'üü°'
Error = 'üî¥'
Info = 'üîµ'
# -----------------------


# ------ Temp variables ------
wait_for_secret_key = []
phone = ''
code = 0
# ----------------------------


@dp.message_handler(commands=['start'])
async def start_handle(msg: types.Message):
    global wait_for_secret_key
    global configs

    if configs['OWNER_ID'] is None:
        await msg.answer('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á')
        wait_for_secret_key.append(msg.chat.id)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:')
    else:
        if msg.chat.id != configs['OWNER_ID']:
            await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        else:
            await msg.answer('–í–≤–æ–¥ –∫–ª—é—á–∞ –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')


@dp.message_handler(commands=['login'])
async def login_handle(msg: types.Message):
    global configs
    global phone_require
    global client

    if await client.is_user_authorized():
        await msg.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
        return
    if configs['OWNER_ID'] is None:
        await msg.answer('–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á')
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    else:
        if configs['OWNER_ID'] != msg.chat.id:
            await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        else:
            await msg.answer('–ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...')
            await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
            phone_require = True


@dp.message_handler(commands=['update_list'])
async def list_channels_handle(msg: types.Message):
    global client
    global channels_list

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    text = []
    await msg.answer('–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚è∞')
    async for dialog in client.iter_dialogs():
        if dialog.is_channel:
            dialog = dialog.entity
            if dialog.id not in [elem.id for elem in analyzing_channels_list]:
                text.append(dialog.title + '\n' + Error + f'–ù–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')
            else:
                text.append(dialog.title + '\n' + Done + f'–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')
            if dialog.id not in [elem.id for elem in channels_list]:
                channels_list.append(dialog)
    await msg.answer('\n\n'.join(text))
    await msg.answer('–î–æ–±–∞–≤–∏—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É:\n/add_to_analyze')


@dp.message_handler(commands=['add_to_analyze'])
async def channel_handle(msg: types.Message):
    global client
    global channels_list
    global channel_name_require

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if len(channels_list) == 0:
        await msg.answer('–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π\n/update_list')
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    items = [types.KeyboardButton('/cancel')]
    temp_list = []
    for channel in channels_list:
        if channel.id not in [elem.id for elem in analyzing_channels_list]:
            temp_list.append(channel)
    items.extend([types.KeyboardButton(elem.title + f'\n({elem.id})') for elem in temp_list])
    markup.add(*items)
    channel_name_require = True
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª', reply_markup=markup)


@dp.message_handler(commands=['remove_from_analyze'])
async def remove_from_analyze_handle(msg: types.Message):
    global client
    global analyzing_channels_list
    global channel_name_for_delete_require

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if not analyzing_channels_list:
        await msg.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç')
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    items = [types.KeyboardButton('/cancel')]
    temp_list = analyzing_channels_list
    items.extend([types.KeyboardButton(elem.title + f'\n({elem.id})') for elem in temp_list])
    markup.add(*items)
    channel_name_for_delete_require = True
    await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª', reply_markup=markup)


@dp.message_handler(commands=['analyze_list'])
async def analyze_list_handle(msg: types.Message):
    global client
    global analyzing_channels_list

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if not analyzing_channels_list:
        await msg.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –≥—Ä—É–ø–ø –ø—É—Å—Ç')
        return

    text = []
    for channel in analyzing_channels_list:
        text.append(Info + channel.title)
    await msg.answer('\n\n'.join(text))


@dp.message_handler(commands=['get_channel_info'])
async def get_info_handle(msg: types.Message):
    global client
    global channels_list
    global channel_name_for_analyze_require

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if len(analyzing_channels_list) == 0:
        await msg.answer('–°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–æ–π')
        await msg.answer('–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π\n/update_list')
        return
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        items = [types.KeyboardButton('/cancel')]
        items.extend(
            [types.KeyboardButton(channel.title + f'\n({channel.id})') for channel in analyzing_channels_list])
        markup.add(*items)
        await msg.answer('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', reply_markup=markup)
        channel_name_for_analyze_require = True


@dp.message_handler(commands=['get_database'])
async def get_db_handle(msg: types.Message):
    global client

    if configs['OWNER_ID'] != msg.chat.id:
        await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
        return

    if not await client.is_user_authorized():
        await msg.answer('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        return

    if getsize('msgs_database.db') / 1000 / 1000 >= 50:
        copyfile('msgs_database.db', f'msg_dump_{current_month}.{current_year}.db')
        await msg.answer('–ë–∞–∑–∞ –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä—ë–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    else:
        await bot.send_document(msg.chat.id, types.InputFile('msgs_database.db', f'msg_dump_{current_month}.{current_year}.db'))


@dp.message_handler(content_types=['text'])
async def text_handle(msg: types.Message):
    global wait_for_secret_key
    global configs
    global phone
    global phone_require
    global code
    global code_require
    global client
    global channel_name_require
    global channel_name_for_analyze_require
    global confirm_for_delete_require
    global channel_id_for_delete
    global channel_name_for_delete_require

    if msg.chat.id not in wait_for_secret_key:
        # –ï—Å–ª–∏ –∫–ª—é—á —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if configs['OWNER_ID'] is None:
            await msg.answer('–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É')
        else:
            if msg.chat.id != configs['OWNER_ID']:
                await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')
            else:

                if phone_require:
                    try:
                        phone = check_phone_number(msg.text)
                    except ValueError as error:
                        await msg.answer(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {str(error)}')
                    else:
                        await msg.answer(f'–í–∞—à –Ω–æ–º–µ—Ä: {phone}')
                        try:
                            dp.loop.create_task(registration.send_code(phone))
                        except Exception as error:
                            await msg.answer('–¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç—Ç–æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω')
                            print(error)
                        else:
                            phone_require = False
                            code_require = True
                            await msg.answer(f'–í–∞–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram')
                            await msg.answer(f'–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "code<–≤–∞—à_–∫–æ–¥>"')
                elif code_require:
                    if len(msg.text) != 9 or 'code' not in msg.text:
                        await msg.answer('–ö–æ–¥ –±—ã–ª –≤–≤–µ–¥—ë–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')
                    else:
                        code = msg.text.split('code')[1]
                        if not code.isdigit():
                            await msg.answer('–ö–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º')
                        else:
                            try:
                                await msg.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞')
                                dp.loop.create_task(registration.sing_in(phone, code))
                            except Exception as error:
                                await msg.answer('–¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–¥')
                                print(error)
                            else:
                                del client
                                client = registration.get_client()
                                code_require = False

                                dp.loop.create_task(scheduled_actions())

                                await msg.answer('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
                elif channel_name_require:
                    res = await msg_error_handler(msg, 'channel_name_require', channels_list)
                    print(res)
                    if res:
                        return

                    try:
                        id = int(msg.text.split('(')[-1].strip(')'))
                    except Exception:
                        await msg.answer('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')
                        return

                    if id in [el.id for el in analyzing_channels_list]:
                        await msg.answer('–ö–∞–Ω–∞–ª —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è')
                        return

                    index = [el.id for el in channels_list].index(id)
                    analyzing_channels_list.append(channels_list[index])
                    result = await client(GetFullChannelRequest(channels_list[index].id))

                    await do_record(result)
                    await msg.answer(f'–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: {msg.text.split("(")[0]}',
                                     reply_markup=types.ReplyKeyboardRemove())
                    channel_name_require = False
                elif channel_name_for_analyze_require:
                    res = await msg_error_handler(msg, 'channel_name_for_analyze_require')
                    if res:
                        return

                    result = await get_channel_info_from_msg(msg)

                    text = get_current_info(result)
                    await msg.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ "{result.chats[0].title}":\n{text}',
                                     reply_markup=types.ReplyKeyboardRemove())
                    channel_name_for_analyze_require = False
                elif channel_name_for_delete_require:
                    res = await msg_error_handler(msg, 'channel_name_for_delete_require')
                    if res:
                        return

                    result = await get_channel_info_from_msg(msg)
                    type(result)

                    text = get_current_info(result)
                    await msg.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ "{result.chats[0].title}":\n{text}',
                                     reply_markup=types.ReplyKeyboardRemove())

                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
                    items = [
                        types.KeyboardButton('–î–∞'),
                        types.KeyboardButton('–ù–µ—Ç')
                    ]
                    markup.add(*items)

                    await msg.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º?',
                                     reply_markup=markup)

                    channel_name_for_delete_require = False
                    confirm_for_delete_require = True
                    channel_id_for_delete = result.full_chat.id
                elif confirm_for_delete_require:
                    if msg.text.lower() == '–¥–∞':
                        await msg.answer(f'–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (id={channel_id_for_delete})',
                                         reply_markup=types.ReplyKeyboardRemove())
                        await delete_data(channel_id_for_delete, True, True)
                        index = [el.id for el in analyzing_channels_list].index(channel_id_for_delete)
                        del analyzing_channels_list[index]
                        await msg.answer(f'–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã')
                    else:
                        await msg.answer('–û—Ç–º–µ–Ω–∞', reply_markup=types.ReplyKeyboardRemove())

    else:
        if configs['OWNER_ID'] is None:
            if configs['SECRET_KEY'] == msg.text:
                set_config('OWNER_ID', msg.chat.id)
                configs = load_configs()
                await msg.answer('–ö–ª—é—á —Å–æ–≤–ø–∞–ª')
                wait_for_secret_key = []
                await msg.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /login')
            else:
                await msg.answer('–ö–ª—é—á –Ω–µ —Å–æ–≤–ø–∞–ª')
        else:
            await msg.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç')


if __name__ == '__main__':
    executor.start_polling(dp)
